// <auto-generated />
using System;
using CarlZeiss.Movies.Api.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarlZeiss.Movies.Api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200521212002_bookingdate")]
    partial class bookingdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("CarlZeiss.Movies.Api.Models.BookedSeat", b =>
                {
                    b.Property<int>("BookingId");

                    b.Property<int>("SeatId");

                    b.HasKey("BookingId");

                    b.HasIndex("SeatId");

                    b.ToTable("BookedSeats");
                });

            modelBuilder.Entity("CarlZeiss.Movies.Api.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ShowId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ShowId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("CarlZeiss.Movies.Api.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("CarlZeiss.Movies.Api.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Genre");

                    b.Property<string>("Language");

                    b.Property<string>("MovieName");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("CarlZeiss.Movies.Api.Models.Multiplex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CityId");

                    b.Property<string>("MultiplexName");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Multiplexes");
                });

            modelBuilder.Entity("CarlZeiss.Movies.Api.Models.SeatMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MultiplexId");

                    b.Property<int>("SeatNo");

                    b.HasKey("Id");

                    b.HasIndex("MultiplexId");

                    b.ToTable("MasterSeats");
                });

            modelBuilder.Entity("CarlZeiss.Movies.Api.Models.Show", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MovieId");

                    b.Property<int>("MultiplexId");

                    b.Property<DateTime>("ShowDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("MultiplexId");

                    b.HasIndex("MovieId", "MultiplexId", "ShowDate")
                        .IsUnique();

                    b.ToTable("Shows");
                });

            modelBuilder.Entity("CarlZeiss.Movies.Api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Role");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CarlZeiss.Movies.Api.Models.BookedSeat", b =>
                {
                    b.HasOne("CarlZeiss.Movies.Api.Models.Booking", "Bookings")
                        .WithMany("Seats")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CarlZeiss.Movies.Api.Models.SeatMaster", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CarlZeiss.Movies.Api.Models.Booking", b =>
                {
                    b.HasOne("CarlZeiss.Movies.Api.Models.Show", "Show")
                        .WithMany("Bookings")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CarlZeiss.Movies.Api.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CarlZeiss.Movies.Api.Models.Multiplex", b =>
                {
                    b.HasOne("CarlZeiss.Movies.Api.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CarlZeiss.Movies.Api.Models.SeatMaster", b =>
                {
                    b.HasOne("CarlZeiss.Movies.Api.Models.Multiplex", "multiplex")
                        .WithMany()
                        .HasForeignKey("MultiplexId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CarlZeiss.Movies.Api.Models.Show", b =>
                {
                    b.HasOne("CarlZeiss.Movies.Api.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CarlZeiss.Movies.Api.Models.Multiplex", "Multiplex")
                        .WithMany()
                        .HasForeignKey("MultiplexId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
